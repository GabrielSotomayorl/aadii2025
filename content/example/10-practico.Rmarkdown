---
title: "Análisis de Senderos"
linktitle: "10: Análisis de Senderos"
date: "2023-05-29"
menu:
  example:
    parent: Ejemplos
    weight: 10
type: docs
toc: true
editor_options: 
  chunk_output_type: console
---

El análisis de senderos es una técnica estadística que permite descomponer correlaciones en diferentes componentes causales para entender las relaciones directas e indirectas entre diferentes variables. Esta técnica es especialmente útil cuando queremos entender el efecto de una variable sobre otra a través de una o más variables intermedias (o "mediadoras").

En esta guía trabajaremos con el ejemplo de Análisis de Senderos presentado por la Dra. Monica Gereber en su taller de [Análisis de Ecuaciones estructurales](https://www.youtube.com/watch?v=Ijg8NQe95W0&ab_channel=CentroCOES). En este se busca medir el efecto indirecto de la posición política en el nivel de acuerdo con castigos severos contra aquellos que cometen delitos, siendo la variables intermedia el autoritarismo de derechas. En modelo planteado puede verse en el siguiente esquema:

![](https://github.com/Clases-GabrielSotomayor/pruebapagina/blob/master/content/example/input/sendero.png?raw=true)

```{r}
# Carga las bibliotecas necesarias
library(haven)
library(MVN)
library(lavaan)
library(semPlot) 
library(semTable)
```

Las bibliotecas necesarias son haven para la importación de datos, MVN para la evaluación de la normalidad multivariante, lavaan para realizar análisis de senderos, semPlot para la visualización del modelo y semTable para la presentación de los resultados.

```{r}
# Importar datos
datos <- read_sav(url("https://github.com/Clases-GabrielSotomayor/pruebapagina/raw/master/content/example/input/data/elsoc2016.sav"))

```

Los datos se importan de una URL utilizando la función read_sav de la biblioteca haven.

```{r}
# Comprobación de supuestos
dim(datos)
cor(datos[,c("castigo_media","rwa_media","derecha", "izquierda" , "centro")],use = "complete.obs")
summary(datos)
mvn(datos[,c("castigo_media","rwa_media","derecha", "izquierda" , "centro")],mvnTest = "mardia")
```

Aquí se revisan varios supuestos antes de ajustar el modelo de senderos. 
- dim(datos) muestra las dimensiones de los datos 
- cor(datos,use = "complete.obs") muestra las correlaciones entre variables
- summary(datos) ofrece un resumen estadístico de las variables
- mvn(datos) evalúa la normalidad multivariante, que es un supuesto clave en el análisis de senderos, en particular para es uso del método de estimación de máxima verosimilitud.

# Especificación y estimación del modelo

Para especificar el modelo, debemos definir las variables que lo componen y sus relaciones. Para integrar esto en R, en el paquete lavaan, debemos expresar nuestro modelo de senderos en la sintaxis propia de dicho paquete:

| Sintaxis | Comando                                          | Ejemplo                                                           |
|---------------|------------------------|---------------------------------|
| \~       | Regresar en                                      | Regresar B sobre A: B \~ A                                        |
| \~\~     | (Co)varianza                                     | Varianza de A: A \~\~ A                                           |
| =\~      | Definir variable latente                         | Definir Definir Factor 1 por A-D: F1 =\~ A + B + C + D            |
| :=       | Definir parámetro fuera del modelo               | Definir parámetro u2 como doble del cuadrado de u: u2 := 2\*(u^2) |
| \*       | Etiquetar parámetros (etiqueta antes de símbolo) | Etiquetar la regresión de Z sobre X como b: Z \~ b\*X             |

```{r}
# Especificar y ajustar el modelo de senderos
mod_sendero <-    'castigo_media ~ rwa_media
                   rwa_media ~ derecha + izquierda + centro'
ajus_sendero <- sem(mod_sendero, data=datos)
```

En este caso planteamos que el acuerdo con castigos violentos depende de el nivel de autoritarismo de derecha, mientras que este depende de la posición política, introducida como 3 variables dicotómicas.

La función sem() del paquete lavaan se utiliza para ajustar el modelo. En este modelo, 'castigo_media' se modela como una función de 'rwa_media', y 'rwa_media' se modela como una función de 'derecha', 'izquierda', y 'centro'.

```{r}
# Resumen de los resultados del modelo de senderos
summary(ajus_sendero, fit.measures = T, standardized = T, rsquare = T, modindices = T)

```

La función summary() proporciona un resumen de los resultados, incluyendo varias medidas de ajuste, coeficientes estandarizados, los coeficientes de determinación (R^2) y los índices de modificación.

En primer lugar debemos ver si el ajuste global del modelo es apropiado.

Test de chi cuadrado: Este es un test que compara el modelo estimado con el modelo de saturación (uno que ajusta perfectamente los datos). Un resultado no significativo (p>0.05) sugiere que el modelo de la hipótesis se ajusta igual de bien que el modelo saturado. En este caso, el p-valor es 0.000, lo que indica que el modelo no se ajusta perfectamente a los datos.

CFI/TLI: Estos son índices de ajuste comparativo que comparan el ajuste del modelo de la hipótesis con el de un modelo nulo. Valores por encima de 0.90 suelen considerarse aceptables, y por encima de 0.95 muy buenos. En este caso, el CFI es 0.952 y el TLI es 0.888, lo que sugiere que el modelo se ajusta razonablemente bien a los datos, aunque podría ser mejor.

RMSEA: Es una medida de ajuste absoluto que indica el error de aproximación en el ajuste del modelo. Valores por debajo de 0.05 se consideran buenos, y por debajo de 0.08 aceptables. Aquí, el RMSEA es 0.046, lo que indica un buen ajuste.

SRMR: Es la media cuadrática de los residuos estandarizados, una medida del ajuste promedio del modelo. Valores por debajo de 0.08 se consideran buenos. En este caso, el SRMR es 0.021, lo que indica un muy buen ajuste.

Luego revisamos los coeficientes path en el modelo. Cada coeficiente indica la magnitud y dirección del efecto de una variable sobre otra. En este caso, vemos que "autoritarismo de derechas" tiene un efecto positivo significativo en "castigo severo" (coeficiente = 0.284, p < 0.001), ser de "derecha" (respecto a ser independiente) tiene un efecto positivo significativo en "autoritarismo de derechas" (coeficiente = 0.182, p < 0.001), ser de "izquierda" (respecto a ser independiente) tiene un efecto negativo significativo en "autoritarismo de derechas" (coeficiente = -0.404, p < 0.001), y ser de "centro" (respecto a ser independiente) tiene un efecto negativo significativo en "autoritarismo de derechas" (coeficiente = -0.094, p = 0.005).

El R-cuadrado para cada una de las variables dependientes ("castigo severo" y "autoritarismo de derechas") proporciona la cantidad de varianza explicada por las variables independientes en el modelo. En este caso, el 8% de la varianza en "castigo severo" se explica por "autoritarismo de derechas", y el 4.4% de la varianza en "autoritarismo de derechas" se explica por "derecha", "izquierda" y "centro".

```{r,results='asis'}
# Crear una tabla de resultados en formato APA
semTable(ajus_sendero, type = "html", paramSets = c("loadings", "slopes", "latentcovariances", 
                                                    "fits", "constructed"), file = "resultados_sendero")


```

Aquí usamos semTable() para generar una tabla con los resultados principales del modelo.

```{r,eval=FALSE}
# Mostrar la tabla de resultados en un navegador
browseURL("resultados_sendero.html")

```

Aquí utilizamos browseURL() para abrir el archivo HTML generado en el navegador por defecto. Es una manera eficaz de visualizar la tabla de resultados.

```{r}
# Especificar y ajustar el modelo de senderos con efectos indirectos
mod_sendero3 <-    'castigo_media ~ a* rwa_media + c*derecha
                    rwa_media ~ b* derecha + izquierda + centro
                    ind_derecha_rwa := a*b
                    total_derecha_rwa := (a*b)+c'
ajus_sendero3 <- sem(mod_sendero3, data=datos)

```

Este bloque de código define y ajusta un modelo de senderos que incluye la definición de efectos indirectos, para que R nos entregue su significación. Además se agregar un efecto directo de ser de derecha sobre el nivel de apoyo a los castigos severos contra aquellos que cometen delitos, considerando las recomendaciones del. Aquí se está modelando 'castigo_media' como una función de 'rwa_media' y 'derecha', y 'rwa_media' como una función de 'derecha', 'izquierda', y 'centro'. Además, se introducen dos parámetros nuevos, 'ind_derecha_rwa' y 'total_derecha_rwa', que representan los efectos indirectos y totales de 'derecha' sobre 'castigo_media' a través de 'rwa_media', respectivamente.

![](https://github.com/Clases-GabrielSotomayor/pruebapagina/blob/master/content/example/input/sendero2.png?raw=true)

```{r}
# Resumen de los resultados del modelo de senderos con efectos indirectos
summary(ajus_sendero3, fit.measures = T, standardized = T, rsquare = T, modindices = T)
```

Por último, se utiliza summary() para proporcionar un resumen de los resultados del modelo que incluye los efectos indirectos. Esto incluirá las mismas estadísticas que antes, pero ahora también incluirá los efectos indirectos y totales que hemos especificado.

ind_derecha_rwa: El efecto indirecto de "derecha" en "castigo severo" a través de "autoritarismo de derechas" es significativo y positivo (Estimate = 0.051, p < 0.000). Esto significa que, manteniendo todo lo demás constante, ser de derecha (respecto de ser independiente) incrementa la puntuación en "castigo severo" a través de su efecto en "autoritarismo de derechas".

total_derecha_rwa: El efecto total de "derecha" en "castigo severo" es también significativo y positivo (Estimate = 0.160, p < 0.000). Esto significa que, manteniendo todo lo demás constante, ser de derecha (respecto de ser independiente) incrementa la puntuación en "castigo severo" tanto directamente como indirectamente a través de su efecto en "autoritarismo de derechas".

```{r}
# Diagrama del modelo de senderos
semPaths(ajus_sendero3, # modelo ajustado
         what = "std",  # mostrar cargas estandarizadas
         label.cex = 1, edge.label.cex = 1, # tamaño de las etiquetas y caracteres
         residuals = FALSE, # no mostrar residuos
         edge.color = "black") # color de las flechas
```

Aquí usamos semPaths() para generar un diagrama del modelo de senderos que hemos ajustado. Los argumentos de esta función son similares a los que hemos usado antes. ajus_sendero3 es el modelo ajustado, what = "std" indica que se deben mostrar las cargas estandarizadas en lugar de las no estandarizadas, label.cex = 1 y edge.label.cex = 1 controlan el tamaño de las etiquetas y de las flechas respectivamente, residuals = FALSE indica que no se deben mostrar los residuos en el diagrama, y edge.color = "black" establece el color de las flechas a negro.

Este diagrama proporciona una representación visual del modelo de senderos que hemos ajustado, lo que puede facilitar su interpretación. En el diagrama, las variables observables se representan como rectángulos, las variables latentes (si las hay) como óvalos, y las relaciones entre variables como flechas. Las cargas factoriales o coeficientes de las rutas se representan junto a las flechas correspondientes.
